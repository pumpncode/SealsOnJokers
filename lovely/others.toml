[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then"
position = "at"
payload = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play then"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = 'for _, v in ipairs(info_queue) do'
position = "before"
payload = 'if _c.legallyplasmasleeve then info_queue[#info_queue+1] = {key = "legallyplasmasleeve", set = "Other"} end'
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:apply_to_run(center)"
position = "at"
payload = "function Card:apply_to_run(center, isblueprint)"
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
local card_to_save = self and copy_card(self) or Card(0, 0, G.CARD_W, G.CARD_H, G.P_CARDS.empty, center)
card_to_save.VT.x, card_to_save.VT.y = G.vouchers.T.x, G.vouchers.T.y
card_to_save.ability.extra = self and self.ability.extra or card_to_save.ability.extra
G.vouchers:emplace(card_to_save)
'''
position = "at"
payload = '''
local card_to_save
if not isblueprint then
    card_to_save = self and copy_card(self) or Card(0, 0, G.CARD_W, G.CARD_H, G.P_CARDS.empty, center)
    card_to_save.VT.x, card_to_save.VT.y = G.vouchers.T.x, G.vouchers.T.y
    card_to_save.ability.extra = self and self.ability.extra or card_to_save.ability.extra
    G.vouchers:emplace(card_to_save)
else
    card_to_save = self
end
'''
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''-- TARGET: card destroyed'''
position = "after"
payload = '''
if card.ability.eternal then destroyed = nil end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''if removed then'''
position = "at"
payload = '''
if removed and not (G.hand.highlighted[i] and G.hand.highlighted[i].ability and G.hand.highlighted[i].ability.eternal) then
'''
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''local unsplashed = SMODS.never_scores(G.play.cards[i])'''
position = "at"
payload = '''
local unsplashed = SMODS.never_scores(G.play.cards[i]) or #SMODS.find_card("j_soe_reversesplash") > 0
'''
overwrite = true
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
context.main_scoring = nil
context.individual = true
context.other_card = card
'''
position = "after"
payload = '''
SEALS.nojokercalculate({individual = true, other_card = card, cardarea = card.area})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''=[SMODS _ "src/utils.lua"]'''
pattern = '''
context.playing_card_end_of_round = nil
context.individual = true
context.other_card = card
'''
position = "after"
payload = '''
SEALS.nojokercalculate({individual = true, other_card = card, end_of_round = true})
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.name == 'Joker' then
    return {
        message = localize{type='variable',key='a_mult',vars={self.ability.mult}},
        mult_mod = self.ability.mult
    }
'''
position = "at"
payload = '''
if self.ability.name == 'Joker' then
    if SEALS.find_mod("YGGDRASIL") then
        return {
            mult = self.ability.extra.mult <= 0 and nil or self.ability.extra.mult,
            chips = self.ability.extra.chips <= 0 and nil or self.ability.extra.chips,
            xmult = self.ability.extra.xmult <= 1 and nil or self.ability.extra.xmult,
        }
    else
        return {
            message = localize{type='variable',key='a_mult',vars={self.ability.mult}},
            mult_mod = self.ability.mult
        }
    end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = '''functions/state_events.lua'''
pattern = '''
for k, v in ipairs(G.play.cards) do
    if (not v.shattered) and (not v.destroyed) then 
        draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
        it = it + 1
    end
end
'''
position = "at"
payload = '''
local yellowsealers = {}
for k, v in ipairs(G.play.cards) do
    if (not v.shattered) and (not v.destroyed) and not SEALS.has_seal(v, "soe_yellowseal") then 
        draw_card(G.play,G.discard, it*100/play_count,'down', false, v)
        it = it + 1
    end
    if (not v.shattered) and (not v.destroyed) and SEALS.has_seal(v, "soe_yellowseal") then
        table.insert(yellowsealers, v)
        it = it + 1
    end
end
if #yellowsealers > 0 then
    G.FUNCS.draw_from_play_to_hand(yellowsealers)
end
'''
overwrite = true
match_indent = true